from fastapi import APIRouter, UploadFile, File, Form, HTTPException, Query, Depends, Request
from typing import Optional, List
from typing_extensions import Annotated
from sqlalchemy import select, func
from sqlalchemy.orm import selectinload
import os
import shutil
import aiofiles
from mutagen import File as MutagenFile
from pathlib import Path
from src.database.deps import SessionDep
from src.models.beats import BeatModel, StatusType
from src.models.beat_bricing import BeatPricingModel
from src.schemas.beats import BeatResponse, BeatListResponse
from src.services.AuthService import get_current_user
from src.dependencies.auth import get_current_user_id
from src.telegram_bot.bot import support_bot
from src.core.cache import cached
from src.services.RedisService import redis_service
from pathlib import Path

router = APIRouter(prefix="/beats", tags=["–ê—É–¥–∏–æ —Ñ–∞–π–ª—ã"])

AUDIO_STORAGE = Path("audio_storage")
AUDIO_STORAGE.mkdir(parents=True, exist_ok=True)

@router.post("/create", response_model=BeatResponse, summary = "–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª")
async def create_beat(
    session: SessionDep,
    current_user_id: Annotated[int, Depends(get_current_user_id)],
    name: str = Form(...),
    genre: str = Form(...),
    tempo: int = Form(...),
    key: str = Form(...),
    promotion_status: str = Form("standard"),
    status: str = Form("active"),
    mp3_file: UploadFile = File(None),
    wav_file: UploadFile = File(None),
):
    
    if mp3_file and mp3_file.filename and not mp3_file.filename.lower().endswith('.mp3'):
        raise HTTPException(400, "MP3 —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .mp3")
    
    if wav_file and wav_file.filename and not wav_file.filename.lower().endswith('.wav'):
        raise HTTPException(400, "WAV —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .wav")

    beat = BeatModel(
        name=name,
        genre=genre,
        author_id = current_user_id,
        tempo=tempo,
        key=key,
        promotion_status=promotion_status,
        status=StatusType.MODERATED,
        mp3_path=None,
        wav_path=None,
        size=0,
        duration=0.0
    )
    
    session.add(beat)
    await session.flush() 
    
    try:
        if mp3_file or wav_file:
            beat_folder = AUDIO_STORAGE / "beats" / str(beat.id)
            beat_folder.mkdir(parents=True, exist_ok=True)
            
            total_size = 0
            
        if mp3_file and mp3_file.filename:
            mp3_path = beat_folder / "audio.mp3"
            content = await mp3_file.read() 
            async with aiofiles.open(mp3_path, "wb") as f:
                await f.write(content)
            beat.mp3_path = str(mp3_path.relative_to(AUDIO_STORAGE))
            total_size += len(content)
    
            try:
                audio = MutagenFile(mp3_path)
                if audio is not None and hasattr(audio, 'info'):
                    beat.duration = round(audio.info.length, 2)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ MP3: {e}")

        if wav_file and wav_file.filename:
            wav_path = beat_folder / "audio.wav"
            content = await wav_file.read()
            async with aiofiles.open(wav_path, "wb") as f:
                await f.write(content)
            beat.wav_path = str(wav_path.relative_to(AUDIO_STORAGE))
            total_size += len(content)
            
            try:
                audio = MutagenFile(wav_path)
                if audio is not None and hasattr(audio, 'info'):
                    beat.duration = round(audio.info.length, 2)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ WAV: {e}")
                    
            beat.size = total_size
        
        await session.commit()
        
        result = await session.execute(
            select(BeatModel)
            .where(BeatModel.id == beat.id)
            .options(
                selectinload(BeatModel.owner),
                selectinload(BeatModel.pricings).selectinload(BeatPricingModel.tariff)
            )
        )
        beat_with_relations = result.scalar_one()

        user_info = {
            'id': beat_with_relations.owner.id,
            'username': beat_with_relations.owner.username,
            'email': beat_with_relations.owner.email
        }

        beat_data = {
            'id': beat_with_relations.id,
            'name': beat_with_relations.name,
            'genre': beat_with_relations.genre,
            'tempo': beat_with_relations.tempo,
            'key': beat_with_relations.key,
            'promotion_status': beat_with_relations.promotion_status
        }

        audio_path = None
        if beat_with_relations.mp3_path:
            audio_path = AUDIO_STORAGE / beat_with_relations.mp3_path
        elif beat_with_relations.wav_path:
            audio_path = AUDIO_STORAGE / beat_with_relations.wav_path

        import asyncio
        asyncio.create_task(
            support_bot.send_beat_moderation_notification(beat_data, user_info, str(audio_path) if audio_path else None)
        )
        
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∫–µ—à–∞...")
        success = await redis_service.delete_pattern("*beats:*")
        if success:
            print("‚úÖ –ö–µ—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–µ—à")
        return BeatResponse.model_validate(beat_with_relations)
        
    except Exception as e:
        await session.rollback()
        beat_folder = AUDIO_STORAGE / "beats" / str(beat.id)
        if beat_folder.exists():
            shutil.rmtree(beat_folder, ignore_errors=True)
        raise HTTPException(500, f"–û—à–∏–±–∫–∞: {str(e)}")




@router.get("/", response_model=List[BeatResponse], summary = "–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±–∏—Ç—ã")
@cached(ttl=300)
async def get_beats(
    session: SessionDep,
    skip: int = 0,
    limit: int = 100,
    author_id: Optional[int] = None
):
    from sqlalchemy.orm import selectinload

    query = select(BeatModel).options(
        selectinload(BeatModel.owner),
        selectinload(BeatModel.pricings).joinedload(BeatPricingModel.tariff)
    )

    if author_id is not None:
        query = query.where(BeatModel.author_id == author_id)

    result = await session.execute(
        query
        .offset(skip)
        .limit(limit)
        .order_by(BeatModel.created_at.desc())
    )

    beats = result.unique().scalars().all()
    return [BeatResponse.model_validate(beat) for beat in beats]


@router.get("/top-beatmakers", summary="–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –±–∏—Ç–º–µ–π–∫–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–∏—Ç–æ–≤")
@cached(ttl=600)
async def get_top_beatmakers(
    session: SessionDep,
    limit: int = 10
):
    from sqlalchemy.orm import selectinload
    from src.models.users import UsersModel

    result = await session.execute(
        select(
            BeatModel.author_id,
            func.count(BeatModel.id).label('beat_count'),
            UsersModel.username,
            UsersModel.avatar_path
        )
        .join(UsersModel, BeatModel.author_id == UsersModel.id)
        .where(BeatModel.status == StatusType.AVAILABLE)
        .group_by(BeatModel.author_id, UsersModel.username, UsersModel.avatar_path)
        .order_by(func.count(BeatModel.id).desc())
        .limit(limit)
    )

    top_beatmakers = result.all()

    return [
        {
            "user_id": row.author_id,
            "username": row.username,
            "avatar_path": row.avatar_path,
            "beat_count": row.beat_count
        }
        for row in top_beatmakers
    ]


@router.get("/beatmakers", summary="–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –±–∏—Ç–º–µ–π–∫–µ—Ä–æ–≤ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∏–º –±–∏—Ç–æ–º)")
@cached(ttl=600)
async def get_all_beatmakers(
    session: SessionDep
):
    from src.models.users import UsersModel
    
    
    result = await session.execute(
        select(
            BeatModel.author_id,
            func.count(BeatModel.id).label('beat_count'),
            UsersModel.username,
            UsersModel.avatar_path,
            UsersModel.email,
            UsersModel.birthday,
            UsersModel.is_active,
            UsersModel.role
        )
        .join(UsersModel, BeatModel.author_id == UsersModel.id)
        .group_by(
            BeatModel.author_id,
            UsersModel.username,
            UsersModel.avatar_path,
            UsersModel.email,
            UsersModel.birthday,
            UsersModel.is_active,
            UsersModel.role
        )
        .having(func.count(BeatModel.id) >= 1)
        .order_by(func.count(BeatModel.id).desc())
    )

    beatmakers = result.all()

    return [
        {
            "id": row.author_id,
            "username": row.username,
            "email": row.email,
            "birthday": row.birthday,
            "is_active": row.is_active,
            "role": row.role,
            "avatar_path": row.avatar_path,
            "beat_count": row.beat_count
        }
        for row in beatmakers
    ]


@router.get("/{beat_id}", response_model=BeatResponse, summary = "–ü–æ–ª—É—á–∏—Ç—å –±–∏—Ç –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É")
async def get_beat(
    beat_id: int,
    session: SessionDep
):
    from sqlalchemy.orm import selectinload
    
    result = await session.execute(
        select(BeatModel)
        .options(selectinload(BeatModel.owner))
        .where(BeatModel.id == beat_id)
    )
    
    beat = result.scalar_one_or_none()
    if not beat:
        raise HTTPException(404, "–ë–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return BeatResponse.model_validate(beat)



@router.get("/{beat_id}/stream", summary="–°—Ç—Ä–∏–º–∏–Ω–≥ —Ñ–∞–π–ª–∞")
async def stream_beat(
    session: SessionDep,
    beat_id: int,
    current_user_id: Annotated[int, Depends(get_current_user_id)],
    format: str = Query("mp3", regex="^(mp3|wav)$"),
):
    result = await session.execute(select(BeatModel).where(BeatModel.id == beat_id))
    beat = result.scalar_one_or_none()

    if not beat:
        raise HTTPException(404, "–ë–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    file_path = beat.mp3_path if format == "mp3" else beat.wav_path

    if not file_path or not os.path.exists(file_path):
        raise HTTPException(404, "–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –û–ë–ù–û–í–õ–Ø–ï–ú –°–ß–ï–¢–ß–ò–ö –°–ö–ê–ß–ò–í–ê–ù–ò–ô
    if current_user_id != beat.author_id:
        from src.models.users import UsersModel
        
        author_result = await session.execute(
            select(UsersModel).where(UsersModel.id == beat.author_id)
        )
        author = author_result.scalar_one_or_none()
        
        print(f"üîç Author found: {author is not None}")
        print(f"üîç Current download_count: {author.download_count if author else 'No author'}")
    
        if author:
            old_count = author.download_count
            author.download_count = 1 if author.download_count is None else author.download_count + 1
            await session.commit()
            await session.refresh(author)  # –û–±–Ω–æ–≤–ª—è–µ–º —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            print(f"üîç Download count updated: {old_count} -> {author.download_count}")

    from fastapi.responses import FileResponse

    media_type = "audio/mpeg" if format == "mp3" else "audio/wav"
    response = FileResponse(
        path=file_path,
        media_type=media_type,
        filename=f"{beat.name}.{format}"
    )

    # Add CORS headers for direct file access
    response.headers["Access-Control-Allow-Origin"] = "*"
    response.headers["Access-Control-Allow-Methods"] = "GET, OPTIONS"
    response.headers["Access-Control-Allow-Headers"] = "*"

    return response


@router.delete("/{beat_id}", summary= "–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –ø–æ id")
async def delete_beat(
    beat_id: int,
    session : SessionDep
):
    result = await session.execute(select(BeatModel).where(BeatModel.id == beat_id))
    beat = result.scalar_one_or_none()
    
    if not beat:
        raise HTTPException(404, "–ë–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    
    beat_folder = AUDIO_STORAGE / "beats" / str(beat_id)
    if beat_folder.exists():
        shutil.rmtree(beat_folder, ignore_errors=True)
    
    await session.delete(beat)
    await session.commit()
    
    return {"message": "–ë–∏—Ç —É–¥–∞–ª–µ–Ω"}




@router.post("/generate-identical/", summary="–°–æ–∑–¥–∞–Ω–∏–µ 100 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –±–∏—Ç–æ–≤")
async def generate_identical_beats(
    session: SessionDep,
    current_user_id: Annotated[int, Depends(get_current_user_id)],
    name: str = Form("Default Beat Name"),
    genre: str = Form("hip-hop"),
    tempo: int = Form(140),
    key: str = Form("C"),
    mp3_file: UploadFile = File(None),
    wav_file: UploadFile = File(None),
):
    try:
        if not mp3_file and not wav_file:
            raise HTTPException(status_code=400, detail="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª (MP3 –∏–ª–∏ WAV)")

        total_size = 0
        file_duration = 180.0

        mp3_content = None
        if mp3_file and mp3_file.filename:
            mp3_content = await mp3_file.read()
            total_size += len(mp3_content)

            temp_mp3_path = Path("temp_batch_audio.mp3")
            async with aiofiles.open(temp_mp3_path, "wb") as f:
                await f.write(mp3_content)

            try:
                audio_info = MutagenFile(str(temp_mp3_path))
                if audio_info and hasattr(audio_info, 'info'):
                    file_duration = audio_info.info.length
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ MP3: {e}")

            temp_mp3_path.unlink(missing_ok=True)

        wav_content = None
        if wav_file and wav_file.filename:
            wav_content = await wav_file.read()
            total_size += len(wav_content)

            if file_duration == 180.0:
                temp_wav_path = Path("temp_batch_audio.wav")
                async with aiofiles.open(temp_wav_path, "wb") as f:
                    await f.write(wav_content)

                try:
                    audio_info = MutagenFile(str(temp_wav_path))
                    if audio_info and hasattr(audio_info, 'info'):
                        file_duration = audio_info.info.length
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ WAV: {e}")

                temp_wav_path.unlink(missing_ok=True)

        beats_to_create = []

        for i in range(1, 101):
            beat = BeatModel(
                name=f"{name} #{i}",
                author_id=current_user_id,
                mp3_path=None,
                wav_path=None,
                genre=genre,
                tempo=tempo,
                key=key,
                size=total_size,
                duration=file_duration,
                promotion_status="standard",
                status=StatusType.MODERATED
            )
            beats_to_create.append(beat)

        session.add_all(beats_to_create)
        await session.commit()


        for beat in beats_to_create:
            beat_folder = AUDIO_STORAGE / "beats" / str(beat.id)
            beat_folder.mkdir(parents=True, exist_ok=True)

            mp3_path = None
            wav_path = None


            if mp3_content:
                mp3_path = beat_folder / "audio.mp3"
                async with aiofiles.open(mp3_path, "wb") as f:
                    await f.write(mp3_content)
                beat.mp3_path = str(mp3_path.relative_to(AUDIO_STORAGE))


            if wav_content:
                wav_path = beat_folder / "audio.wav"
                async with aiofiles.open(wav_path, "wb") as f:
                    await f.write(wav_content)
                beat.wav_path = str(wav_path.relative_to(AUDIO_STORAGE))


        await session.commit()


        created_beats = []
        for beat in beats_to_create:
            created_beats.append({
                "id": beat.id,
                "name": beat.name,
                "folder": f"beats/{beat.id}",
                "mp3_path": beat.mp3_path,
                "wav_path": beat.wav_path
            })

        response_data = {
            "message": f"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ 100 –±–∏—Ç–æ–≤",
            "details": {
                "name_template": name,
                "genre": genre,
                "tempo": tempo,
                "key": key,
                "file_size": total_size,
                "duration_seconds": round(file_duration, 2),
                "total_records": len(beats_to_create),
                "files_included": ["mp3" if mp3_content else None, "wav" if wav_content else None],
                "storage_path": str(AUDIO_STORAGE)
            },
            "created_beats": created_beats[:10]
        }

        return response_data

    except Exception as e:
        await session.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∏—Ç–æ–≤: {str(e)}")
    
    

@router.post("/{beat_id}/increment-download", summary="–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π")
async def increment_download_count(
    beat_id: int,
    session: SessionDep,
    current_user_id: Annotated[int, Depends(get_current_user_id)],
):
    from src.models.users import UsersModel
    from src.models.beats import BeatModel
    
    result = await session.execute(select(BeatModel).where(BeatModel.id == beat_id))
    beat = result.scalar_one_or_none()

    if not beat:
        raise HTTPException(404, "–ë–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if current_user_id != beat.author_id:
        author_result = await session.execute(
            select(UsersModel).where(UsersModel.id == beat.author_id)
        )
        author = author_result.scalar_one_or_none()
        
        if author:
            old_count = author.download_count or 0
            author.download_count = old_count + 1
            await session.commit()
            
            return {
                "success": True,
                "message": "–°—á–µ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π —É–≤–µ–ª–∏—á–µ–Ω",
                "new_count": author.download_count
            }
    
    return {"success": True, "message": "–ê–≤—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å —Å–≤–æ–π —Å—á–µ—Ç—á–∏–∫"}